rev	change
r1	Initial Commit
r2	Added Reamdme w/ citation
r3	Added Unit Tests for 'Meta' key
r3	Updated existing unit tests to test several meta scenarios 
r3	"RunAllTests()" method broken out into multiple tests
r4	Parser GetStringLiteral method checks for values values enclosed in single quotes ('....') (amend [r3])
r4	Parser GetCharLiteral returns the individual single-quote-enclosed character or a default value (amend [r3])
r4	Introduced concept of a 'Delayed' unit whose structure is not known until a later time
r4	Delayed units are recognizable by the Key being surrounded with curly braces i.e. {KEY}
r4	DistanceToNextSibling(...) private method added to Parser
r4	The entire (ccl) text of the Key / Value pair is stored as the string value
r4	When a Key is found to be for a 'delayed' unit the Parser will now advance to the next key that is at the same (or lower) indentation level
r4	Constructor now creates an 'IDelayedUnit' which stores the original ccl level for future back-denting
r4	The Delayed value *MUST* be of a record type (though it does not need to resolve to a reocrd type)
r4	The Delayed record *MUST* include a field called 'URL' which will hold a path that will be used to resolve the true value (TODO: [r7],[r12],[r13])
r4	The URL path may be interpolated by wrapping placeholder variables in curly braces (TODO: [r7])
r4	Placeholder values that appear in the URL *MUST* be accompanied by a field of the same name, to be used in the URL path in place of the variable (TODO: [r7])
r4	Created test for Delayed Unit
r5	Parser static methods Broken out to ParserHelpers
r5	Removed Parser.NextKeyLength() method to fix weird logic that was handling empty content scenario in Parser.ParseContent()
r5	IDelayedUnit decorated with IComplexUnit to allow Single-Value return from Constructor
r5	Parser.GetCharLiteral() and Parser.GetStringLiteral Moved to LiteralHelpers static class, now public
r5	ParserHelpers static class now containns all other static methods previously in Parser class
r5	Parser.ParseContent() now checks level of next key (GetNextLevel) and, if > 0 calls new Parser.BackDent() static method
r5	Parset.BackDent method gets level (n) of first key, removes (n) steps of indent from each key
r5	DelayedUnitTests TestLoadDelayedUnit converts delayed unit to a record and verifies the 'URL' field value
r5	DelayedUnitWhitespace runs above test with ignorable new lines and delimiters inserted ahead of the test tree
r6	NestedValue tests replaced '\0' in first test case dilimiter with '='
r6	Added const's for default values of Indent, IndentStep and Delimiter
r6	New Method Parser.GetEndOfMeta() 
r6	Parser.ParseContent code broken out into ParseContentInternal
r6	Parser.ParseContent() now calls ParseContentInternal starting at the end of meta by first calling GetEndOfMeta
r6	static Parser.FromContent() now calls GetEndOfMeta and calls GetMetaParser with path and content up to the end of meta key-value
r6	static Parser.GetMetaParser(path,content) overload calls ParseContentInternal to get meta unit which is then pased to orig. GetMetaParser(unit)
r6	static ParserHelpers.DistanceToNextSibling() now public and renamed to GetDistanceToNextSibling
r6	static GetDistanceToNextSibling parsing loop now using `bool first` technique rather than checking index, much simpler
r7	static Parser.ParseContentInternal() now requires a Parser to work with
r7	static Parser.GetMetaParser() updated to use Default values from [r6]
r7	DisplayUnit class moved to new file
r7	Removed IDelayedUnit properties and existing tests
r7	Created interfaces IDelayedProcessor and IDelayedAccessor
r7	Test implementation of above, see TestUnitProcessor class
r7	Added processesor Registration to Constructor, Func now passed into record for use with delayed units
r7	static Constructor.GetDelayedRecord method used to strip curly braces from delayed key name
r7	static Constructor.GetStructure method now requires the parser that was used to read the ccl
r7	The GetStructure method passes the parser on, eventually to a DelayedUnit which can use it to resolve the host record
r7	Added test to run through delayed unit scenario (basically an x + y function)
r7	Added IDelayedUnit GetHostRecord(accesor) method
r7	Added IDelayedUnit GetHostName(), GetProtocolSchema(), GetPath() methods
r8	DelayedUnit now requires a Func<IUnitRecor> instead of a Parser
r8	DelayedUnit.GetHostRecord method removed 
r8	DelayedUnit.ResolveUrl method will allow interpolated values to be provided "on the fly"
r8	DelayedUnit.Interpolate bug fix - UnitValue.Value not IUnit.ToString() when resolving a ccl provided value
r8	Broke classes and interfaces from Constructor.cs into their own files
r8	ParserHelpers Parse method updated to no set new instance when passing in "parent" recursively, we now call the method in both branches of an if/else
r8	DelayedUnitTests updated to test for providing values on the fly - changed name of field to "Sum" and the path now uses a plus sign
r8	TestUnitProcessor now parses the path to get the two integer numbers on either side of the plus sign
r9	Major refactor of ParserHelpers to reduce duplicate "GetKey*" type methods using single method that returns Key object with index values of (start,end,level,line)
r9	The rules are: A key-name, followed by a Delimiter will, or will not be followed by printable characters before the next new line, if it is (followed by printable characters)
r9	This is a string value which includes all characters after the delimiter up to the start of the line on which the next key is found
r9	Otherwise the sub-values will need to be collected in same manor, i.e. by finding the first subkey-name indicated by the presence of a delimiter.
r9	An empty key-name means the parent is an Array otherwise the parent is a Record and each subkey is a field.
r9	Ultimately, A value ends where the next key begins.
r9	Created CclLevel object to handle stepping up to the next level and resetting
r10	IDelayedUnit ResolveUrl refactored to return the url instead of the new delayed unit
r10	IDelayedUnit now has GetArity() method, will determine number of fields that need to be satisfied for the unit to resolve
r10	DelayedUnit class refactored to trim it down using new static class InterpolationHelpers
r10	Unit Record now responsible for creating new DelayedUnit using url from new IDelayed Unit ResolveUrl
r10	Updated Delayed tests - sum tests now require x,y values
r10 Added test for delayed units that have keys with missing (empty) values, parameters provided are using in place of empty values
r10	Added test for nested delayed value
r10 One Off Tests - Sourrounded empty valued key with valued keys in KeyOnly() test 
r10	TestOrderQuantityLookup class - New Test-Processor to return an integer based on a provided (parameterized) string
r11 ParserHelpers.GetDistanceToNextSibling refactored to use object returned by GetKey instead of its own implementation
r11 Added CatResource project for handling the "res://" schema for calling up outside resources such as a text file
r12 DelayedUnitTests MissingPlaceholderFieldsAreAddedAutomatically test Added 
r12 Constructor static class updated to find all place-hold fields in a "URL" value
r12 All place holders that do not exist are created with an empty value using the same Id as the "URL" value
r12 Minor updates to IResourceProvider
r13 Bug fix - Place Holders no longer create empty values when the field exists as a {delayed} field
r13 Parser constructor now private
r13 ParserHelpers' GetDistanceToNextSibling method updated to return the distance to the LineStart of the last key found
r13 Without regard to the level, valid when last value is multi line
r14 Added QuoteLiteral and QuoteExpansion meta values, as well as the QuoteMeta meta-meta value
r14 QuoteLiteral and QuoteExpansion default to '\0' which is interpreted as 'not quoted'
r14 QuoteMeta is the QuoteLiteral value used in the current meta node
r14 QuoteLiteral is a character that can be used, in pairs to call out the specific value
r14 Only the characters found between these [QuoteLiteral]'s are used as the value
r14 The QuoteLiteral character is not included in the finally expresed Unit Value
r15 PathHelpers static class moved from CatResource to CatConfig
r15 Constructor static class restructured to reduce surface complexity of the main 'GetComplexUnit' method
r15 QuoteExpansion character is intended for use in the URL field of a DelayedUnit, its purpose is to allow slash ('/') characters to appear within a path node value
r15 Static PathHelpers.GetAllNodes method now requires the quote character that will be used to indicate the enclosed, resolved text is a single node regardless of any slashes
r15 New UnitPath struct now handles the URL path and takes care of parsing out the slash ('/') character seperated "node" values using PathHelpers.GetAllNodes
r15 The QuoteExpansion character is provided directly from the parser as a part of the Constructor.GetDelayedUnitValue private method, i.e. not passed into the DelayedUnit ctor
r15 IDelayedUnit GetPath method now returns a UnitPath and, therefore now requires a QuoteExpansion parameter which it uses along with the resolved URL path to create a UnitPath
r15 IDelayedProcessor.ResolveDelayedUnit now requires a UnitPath instead of string valued path
r15 IResourceProvider and ResourceEngine static class moved into CatConfig CatResource project removed
r15 Reorganized code files into relevant folders.